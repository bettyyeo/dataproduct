+
?
??
efit
quit
swirl()
library(swirl)
swirl()
skip
eRes <- deviance(fit)
eRes<- deviance(fit)
sRes <- deviance(fit)
1-sRes/sTot
summary(fit)$r.squared
cor(children~parent)
cor(children~parent,galton)
cor(galton)
cor(galton$parent,galton$child)^2
swirl()
library()
library(swirl)
swirl()
6
dim(InsectSprays)
head(InsectSprays,15)
Type(A)
names(A)
names(sx)
sx[1]
names(sx)
Type(sx)
sx[1]
skip
sB
sB[,2]
InsectsSpray[,2]
InsectSpray{,2}
InsectSpray[,2]
InsectSprays[,2]
summary(InsectSprays[,2])
sapply(classes(InsectSprays))
skip
sapply(InsectSprays,class)
fit<-lm(count~spray,InsectSprays)
smmary(fit)
summary(fit)
summary(fit)$coef
est<-fit[,1]
est<-summary(fit[,1])
skip
est <- summary(fit)$coef[,1]
mean(sA)
mean(sprayB)
mean(sB)
nfit<-lm(count~spray,InsectSprays -1)
nfit<-lm(count~spray,InsectSprays, -1)
nfit <- lm(count~spray -1, InsectSprays)
summary(nfit)$coef
spray2 <- relevel(InsectSpray$spary, "C")
spray2 <- relevel(InsectSprays$spary, "C")
spray2 <- relevel(InsectSprays$spray, "C")
fit2<-lm(count~spray,InsectSprays)
fit2<-lm(count~spray2,InsectSprays)
summary(fit2)$coef
mean(sC)
(fit$coef[2]-fit$coef[3])/1.6011
dim(hunger)
948
names(hunger)
fit<-lm(Numeric~Year,hunger)
summary(fit)$coef
lmF<-hunger[hunger$Sex=="Female"]
lmF<-hunger[hunger$Sex=="Female"]
lmF<-subset(hunger[hunger$Sex=="Female"])
skip
lmF <-lm(hunger$Numer[hunger$Sex=="Female"] ~ hunger$Year[hunger$Sex=="Female"]
)
lmM<-lm(hunger$Numeric[hunger$Sex=="Male"]~hunger$Year(hunger$Sex=="Male"))
lmM<-lm(hunger$Numeric[hunger$Sex=="Male"]~hunger$Year[hunger$Sex=="Male"])
lmBoth <- lm(hunger$Numeric ~hunger$Year,hunger$Sex, hunger)
skip
lmBoth <-lm(hunger$Numberic ~hunger$Year + hunger $Sex)
lmBoth <-lm(hunger$Numberic ~hunger$Year + hunger$Sex, hunger)
lmBoth <-lm(hunger$Numberic ~hunger$Year + hunger$Sex)
lmBoth <-lm(hunger$Numeric ~ hunger$Year + hunger$Sex)
summary(lmBoth)
lmInter <-lm(Numeric ~ Year+Sex+Sex*Year, hunger)
summary(lmInter)
fit <-lm(y~x,out2)
plot(fit,which=1)
fit <-lm(y~x -out2[-1,],out2)
skip
lm(y~x,out2[-1,])
fitno<-lm(y~x,out2[-1,])
plot(fitno,which=1)
coef(fit)-coef(fitno)
head(dfebta(fit))
head(dfbeta(fit))
skip
resno <- out2[1, "y"] - predict(fitno, out2[1,])
1-resid(fit)[1]/resno
skip
head(hatvalues(fit))
skip
sigma <- sqrt(deviance(fit)/df.residual(fit))
skip
rstd <-resid(fit)/(sigma * sqrt(1-hatvalues(fit)))
View(cbind(rstd,rstandard(fit)))
plot(fit,which=1)
plot(fit,which=3)
plot(fit,which=2)
skip
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
skip
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
skip
head(rstudent(fit))
skip
dy <- predict(fitno, out2)-predict(fit, out2)
skip
sum(dy^2)/(2*sigma^2)
skip
plot(fit, which=5)
package(Matrix)
install.package(Matrix)
install.packages("Matrix")
swirl()
install.packages("car")
swirl
swirl()
swirl()
package(swirl)
package(swirl)
package(swirl)
package(swirl)
install.packages("swirl")
install.packages("swirl")
package("swirl")
library(swirl)
swirl()
rgp1()
rpg2()
rgp2()
head(swiss)
skip
mdl <- lm(Fertility ~ ., swiss)
vif(mdl)
md12<-lm(Fertility -Examination,swiss)
skip
md12<-lm(Fertility -., -Examination,swiss)
skip
mdl2 <- lm(Fertility ~ . -Examination, swiss)
vif(mdl2)
skip
x1c <- simbias()
apply(x1c, 1, mean)
swirl()
swirl()
swirl()
swirl()
skip
fit1 <- lm(Fertility ~ Agriculture, swiss)
skip
fit3 <- lm(Fertility ~ Agriculture + Examination + Education, swiss)
apply(fit1,fit3)
skip
anova(fit1, fit3)
skip
deviance(fit3)
skip
d <- deviance(fit3)/43
skip
n <- (deviance(fit1) - deviance(fit3))/2
anova(fit3)
n/d
pf(n/d, 2, 43, lower.tail=FALSE)
skip
shapiro.test(fit3$residuals)
anova(fit1, fit3, fit5, fit6)
View(ravenData)
skip
mdl <- glm(ravenWinNum ~ ravenScore, family=binomial, data=ravenData)
skip
lodds <- predict(mdl, data.frame(ravenScore=c(0, 3, 6)))
skip
exp(lodds)/(1+exp(lodds))
summary(mdl)
confint(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95, 1)
rpois(n, lambda)
var(rpois(1000, 50)).
var(rpois(1000, 50))
not()
nxt()
View(hits)
class(hits[,'date'])
as.integer(head(hits[,'date']))
mdl <- glm(visits ~ date, poisson, hits)
summary(mdl)
confint(mdl, 'date')
exp(confint(mdl, 'date'))
which.max(hits[,'visits'])
hits[704,]
lambda <-  mdl$fitted.values[704]
qpois(.95,
| lambda)
qpois(.95,lambda)
skip
mdl2 <- glm(formula = simplystats ~ date, family = poisson, data = hits, offset = log(visits + 1))
qpois(.95, mdl2$fitted.values[704])
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
library(caret)
install.packages("caret")
library(caret)
data(AlzheimerDisease)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ss <- training[,grep('^IL', x = names(training) )]
preProc <- preProcess(ss, method='pca', thresh=0.9,
outcome=training$diagnosis)
IL_str <- grep("^IL", colnames(training), value = TRUE)
preProc <- preProcess(training[, IL_str], method = "pca", thresh = 0.9)
preProc$rotation
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[trainIndex,]
View(training)
View(testing)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
xnames <- colnames(concrete)[1:8]
featurePlot(x=training[, xnames], y=training$CompressiveStrength, plot="pairs")
index <- seq_along(1:nrow(training))
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
qplot(Superplasticizer, data=training)
ggplot(data=training, aes(x=Superplasticizer)) + geom_histogram() + theme_bw()
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
data <- segmentationOriginal
set.seed(125)
inTrain <- data$Case == "Train"
trainData <- data[inTrain, ]
testData <- data[!inTrain, ]
cartModel <- train(Class ~ ., data=trainData, method="rpart")
cartModel$finalModel
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
data <- segmentationOriginal
set.seed(125)
inTrain <- data$Case == "Train"
trainData <- data[inTrain, ]
testData <- data[!inTrain, ]
cartModel <- train(Class ~ ., data=trainData, method="rpart")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
training = segmentationOriginal[segmentationOriginal$Case == "Train",]
testing = segmentationOriginal[segmentationOriginal$Case == "Test",]
set.seed(125)
M <- train(Class ~ ., data=training, method="rpart")
install.packages("e1071")
M <- train(Class ~ ., data=training, method="rpart")
M
M$finalModel
plot(M$finalModel)
text(M$finalModel)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
data <- segmentationOriginal
set.seed(125)
inTrain <- data$Case == "Train"
trainData <- data[inTrain, ]
testData <- data[!inTrain, ]
cartModel <- train(Class ~ ., data=trainData, method="rpart")
cartModel$finalModel
plot(cartModel$finalModel, uniform=T)
text(cartModel$finalModel, cex=0.8)
library(pgmm)
data(olive)
dim(olive)
head(olive)
olive <- olive[,-1]
install.packages("pgmm")
treeModel <- train(Area ~ ., data=olive, method="rpart2")
treeModel
library(pgmm)
data(olive)
dim(olive)
head(olive)
olive <- olive[,-1]
treeModel <- train(Area ~ ., data=olive, method="rpart2")
treeModel
newdata <- as.data.frame(t(colMeans(olive)))
predict(treeModel, newdata)
library(ElemStatLearn)
install.packages("ElemStatLearn")
data(SAheart)
set.seed(8484)
train <- sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
data(SAheart)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train <- sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA <- SAheart[train,]
testSA <- SAheart[-train,]
set.seed(13234)
logitModel <- train(chd ~ age + alcohol + obesity + tobacco +
typea + ldl, data=trainSA, method="glm",
family="binomial")
logitModel
missClass <- function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
predictTrain <- predict(logitModel, trainSA)
predictTest <- predict(logitModel, testSA)
missClass(trainSA$chd, predictTrain) # 0.2727273
missClass(testSA$chd, predictTest) # 0.3116883
data(vowel.train)
data(vowel.test)
head(vowel.train)
head(vowel.test)
dim(vowel.train) # 528  11
dim(vowel.test) # 462  11
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
modelRf <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
order(varImp(modelRf), decreasing=T)
set.seed(33833)
modelRf <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
modelRf <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
order(varImp(modelRf), decreasing=T)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
M <- train(y ~ ., data=vowel.train, method="rf")
rfNews()
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
M <- train(y ~ ., data=vowel.train, method="rf")
varImp(M)
varImp(M)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
head(vowel.train)
head(vowel.test)
dim(vowel.train) # 528  11
dim(vowel.test) # 462  11
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
modelRf <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
order(varImp(modelRf), decreasing=T)
library(ElemStatLearn)
library(caret)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
fitRf <- train(y ~ ., data=vowel.train, method="rf")
fitGBM <- train(y ~ ., data=vowel.train, method="gbm")
library(ElemStatLearn)
library(caret)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
fitRf <- train(y ~ ., data=vowel.train, method="rf")
fitGBM <- train(y ~ ., data=vowel.train, method="gbm")
fitGBM <- train(y ~ ., data=vowel.train, method="gbm")
confusionMatrix(predRf, vowel.test$y)$overall[1]
fitRf <- train(y ~ ., data=vowel.train, method="rf")
predGBM <- predict(fitGBM, vowel.test)
confusionMatrix(predRf, vowel.test$y)$overall[1]
predRf <- predict(fitRf, vowel.test)
confusionMatrix(predRf, vowel.test$y)$overall[1]
confusionMatrix(predGBM, vowel.test$y)$overall[1]
pred <- data.frame(predRf, predGBM, y=vowel.test$y, agree=predRf == predGBM)
head(pred)
accuracy <- sum(predRf[pred$agree] == pred$y[pred$agree]) / sum(pred$agree)
accuracy # Agreement Accuracy: 0.6569579
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData <- data.frame(diagnosis, predictors)
inTrain <- createDataPartition(adData$diagnosis, p=3/4)[[1]]
training <- adData[inTrain, ]
testing <- adData[-inTrain, ]
dim(adData) # 333 131
set.seed(62433)
fitRf <- train(diagnosis ~ ., data=training, method="rf")
fitGBM <- train(diagnosis ~ ., data=training, method="gbm")
fitLDA <- train(diagnosis ~ ., data=training, method="lda")
predRf <- predict(fitRf, testing)
predGBM <- predict(fitGBM, testing)
predLDA <- predict(fitLDA, testing)
pred <- data.frame(predRf, predGBM, predLDA, diagnosis=testing$diagnosis)
fit <- train(diagnosis ~., data=pred, method="rf")
predFit <- predict(fit, testing)
c1 <- confusionMatrix(predRf, testing$diagnosis)$overall[1]
c2 <- confusionMatrix(predGBM, testing$diagnosis)$overall[1]
c3 <- confusionMatrix(predLDA, testing$diagnosis)$overall[1]
c4 <- confusionMatrix(predFit, testing$diagnosis)$overall[1]
print(paste(c1, c2, c3, c4))
library(AppliedPredictiveModeling)
library(elasticnet)
data(concrete)
inTrain <- createDataPartition(concrete$CompressiveStrength,
p=3/4)[[1]]
training <- concrete[inTrain, ]
testing <- concrete[-inTrain, ]
set.seed(233)
fit <- train(CompressiveStrength ~ ., data=training, method="lasso")
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
fit <- train(CompressiveStrength ~ ., data=training, method="lasso")
fit <- train(CompressiveStrength ~ ., data=training, method="lasso")
install.packages("elasticnet")
fit <- train(CompressiveStrength ~ ., data=training, method="lasso")
library(elasticnet)
library(lubridate)  # For year() function below
library(forecast)
install.packages("forecast")
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
library(rCharts)
install.packages("base64enc")
library(rCharts)
install.packages("rCharts")
library(rCharts)
library(devtools)
install.packages("devtools")
install.packages("rCharts")
library(devtools)
install_github("ramnathv/rCharts@dev")
install.packages("shiny")
libray(shiny)
libray(shiny)
install.packages("shiny")
library(shiny)
setwd("~/Downloads/dataproduct")
shiny::runApp('~/Downloads/datapdt')
shiny::runApp('~/Downloads/datapdt')
shiny::runApp('~/Downloads/datapdt')
shiny::runApp('~/Downloads/datapdt')
shiny::runApp('~/Downloads/datapdt')
shiny::runApp('~/Downloads/datapdt')
shiny::runApp('~/Downloads/datapdt')
shiny::runApp('~/Downloads/datapdt')
shiny::runApp('~/Downloads/datapdt')
shiny::runApp('~/Downloads/datapdt')
